{
    "name": "ExampleContract",
    "structs": {
        "ExampleStruct": [
            {
                "name": "value_1",
                "type": "uint64"
            },
            {
                "name": "value_2",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "example_of_method_with_proper_mbr_handling",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "counter": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y291bnRlcg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "some_box_map": {
                    "keyType": "uint64",
                    "valueType": "ExampleStruct",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        72
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        146,
                        220
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        136
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        75
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        150,
                        159,
                        168,
                        177,
                        186,
                        195,
                        204,
                        213,
                        253
                    ],
                    "errorMessage": "check self.counter exists"
                },
                {
                    "pc": [
                        85
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmAgdjb3VudGVyEAAAAAAAAAAAAAAAAAAAAAAxGEAADCiACAAAAAAAAAAAZzEbQQBKgARZ8VFNNhoAjgEAAiJDMRkURDEYRDEWIwlJOBAjEkSIADJPBBZPBBZPBBZPBBZPBBZPBE8EUE8DUE8CUExQgAQVH3x1TFCwI0MxGUD/vjEYFEQjQ4oBBTIKcwFEIihlRCm/iABeIihlRCm/iABVIihlRCm/iABMIihlRCm/iABDIihlRCm/iAA6IihlRCm/iAAxIihlRCm/iAAoIihlRCm/MgpzAURJSwIJi/84CElLAgmxMQBLAbIIsgcjshAisgGziSIoZUQXIwgWKExniQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}